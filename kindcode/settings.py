"""
Django settings for kindcode project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv

BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env (only works locally)
load_dotenv(BASE_DIR / ".env")

# Security
DEBUG = os.getenv("DJANGO_DEBUG", "False") == "True"
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY", "unsafe-default-key")
ALLOWED_HOSTS = os.getenv("DJANGO_ALLOWED_HOSTS", "").split(",")



# Application definition

INSTALLED_APPS = [
    # Created Apps
    'core',
    'creations',

    # Library Apps
    'markdownify',

    # Django Apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'kindcode.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'kindcode.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/


# Static files
STATIC_URL = "/static/"

# where collectstatic will put files (server-side)
STATIC_ROOT = BASE_DIR / "staticfiles"

# folders you edit from source (optional, keep if you have a project-level /static)
STATICFILES_DIRS = [BASE_DIR / "static"]  # ok to keep as you had



# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



# Email backend
EMAIL_BACKEND = os.getenv(
    "EMAIL_BACKEND",
    "django.core.mail.backends.console.EmailBackend" if DEBUG else "postmark.django_backend.EmailBackend"
)

# Postmark (only needed in production)
POSTMARK_API_TOKEN = os.getenv("POSTMARK_API_TOKEN", "")
POSTMARK_TEST_MODE = False
POSTMARK_TRACK_OPENS = True

DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL", "no-reply@kindcode.app")
DAILY_EMAIL_TO = os.getenv("DAILY_EMAIL_TO", "")

# safety: if prod expects Postmark but token is missing, fall back to console
import logging
logger = logging.getLogger(__name__)

if not DEBUG and EMAIL_BACKEND.endswith("postmark.django_backend.EmailBackend"):
    if not POSTMARK_API_TOKEN:
        logger.warning("POSTMARK_API_TOKEN missing in production; falling back to console EmailBackend.")
        EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

# (optional) register postmark app only when available
if "postmark.django_backend" in EMAIL_BACKEND:
    INSTALLED_APPS += ["postmark.django"]

# Optional: set your local timezone for nicer dates
TIME_ZONE = os.getenv("TIME_ZONE", "Europe/Amsterdam")
USE_TZ = True
